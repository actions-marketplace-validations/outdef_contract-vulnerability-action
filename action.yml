name: "Vulnerability Analysis"
description: "Runs vulnerability analysis on Solidity contracts"
author: "Your Name"
inputs:
  solc-version:
    description: "The version of solc to use. Should be autodetected, but may be specified manually."
  node-version:
    description: "The version of node to use."
  target:
    description: "The path of the project that Slither should analyze, relative to the repo root."
    default: .
    type: string
  sarif:
    description: "If provided, the path of the SARIF file to produce, relative to the repo root."
  slither-args:
    description: "Extra arguments to pass to Slither."
  slither-config:
    description: "The path to the Slither configuration file. By default, `./slither.config.json` is used if present."
  slither-version:
    description: "The version of slither-analyzer to use. By default, the latest release in PyPI is used."
  ignore-compile:
    description: "Whether to ignore the compilation step when running crytic-compile and Slither."
    default: false
    type: boolean
  fail-on:
    description: "Cause the action to fail if Slither finds any findings of this severity or higher. By default it will fail if any finding is found"
    default: all
    type: string
  files:
    description: "Solidity files to analyze"
    required: true
  contract:
    description: "Contract to analyze"
    required: false
  config:
    description: "Config file (CLI arguments override config options)"
    required: false
  format:
    description: "Output format: json, text, none. Disables interactive UI"
    required: false
  corpus-dir:
    description: "Directory to store corpus and coverage data"
    required: false
  test-mode:
    description: "Type of tests to be performed"
    required: false
  multi-abi:
    description: "Use multi-abi mode of testing"
    required: false
  test-limit:
    description: "Number of sequences of transactions to generate during testing"
    required: false
  shrink-limit:
    description: "Number of tries to attempt to shrink a failing sequence of transactions"
    required: false
  seq-len:
    description: "Number of transactions to generate during testing"
    required: false
  contract-addr:
    description: "Address to deploy the contract to test"
    required: false
  deployer:
    description: "Address of the deployer of the contract to test"
    required: false
  sender:
    description: "Addresses to use for the transactions sent during testing"
    required: false
  seed:
    description: "Run with a specific seed"
    required: false
  crytic-args:
    description: "Additional arguments to use in crytic-compile for the compilation of the contract to test"
    required: false
  solc-args:
    description: "Additional arguments to use in solc for the compilation of the contract to test"
    required: false
  output-file:
    description: "Capture echidna's output into this file. The path must be relative to the repository root."
    required: false
  negate-exit-status:
    description: "Apply logical NOT to echidna-test's exit status (for testing the action)"
    required: false
  echidna-version:
    description: "Version of the Echidna Docker image to use"
    required: false
    default: latest
  echidna-workdir:
    description: "Path to run echidna-test from. Note that `files` and `config` are relative to this path"
    required: false
  echidna-contracts:
    description: "Comma-separated list of contracts to analyze"
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: "Run Echidna Analyzer"
      id: echidna
      run: |
        # Split the input contracts by commas into an array
        contracts=(${{ split(',', inputs.contracts) }})

        # Iterate over each contract
        for contract in ${{ join(' ', format('{0}', contracts)) }}; do
          echo "Analyzing $contract"

          # Run the echidna-action for each contract
          uses: crytic/echidna-action@v2
          with:
            files: inputs.files
            contract: $contract
            config: inputs.config
            format: inputs.format
            corpus-dir: inputs.corpus-dir
            test-mode: inputs.test-mode
            multi-abi: inputs.multi-abi
            test-limit: inputs.test-limit
            shrink-limit: inputs.shrink-limit
            seq-len: inputs.seq-len
            contract-addr: inputs.contract-addr
            deployer: inputs.deployer
            sender: inputs.sender
            seed: inputs.seed
            crytic-args: inputs.crytic-args
            solc-args: inputs.solc-args
            solc-version: inputs.solc-version
            output-file: inputs.output-file
            negate-exit-status: inputs.negate-exit-status
            echidna-version: inputs.echidna-version
            echidna-workdir: inputs.echidna-workdir
        done
    - name: "Analyze with crytic-compile"
    - name: "Analyze with Echidna"
    - name: "Analyze with Slither"
      uses: crytic/slither-action@v0.3.0
      with:
        solc-version: ${{ inputs.solc-version }}
        node-version: ${{ inputs.node-version }}
        target: ${{ inputs.target }}
        sarif: ${{ inputs.sarif }}
        slither-args: ${{ inputs.slither-args }}
        slither-config: ${{ inputs.slither-config }}
        slither-version: ${{ inputs.slither-version }}
        ignore-compile: ${{ inputs.ignore-compile }}
        fail-on: ${{ inputs.fail-on }}
